<?php
//$Id$
//the above line is needed only to release the module into the drupal module database
/*
This version of the software has been entirely written by Riccardo Bastianini, under the supervision of
Professor Sergio Tasso of University of Perugia.

	CollabRep enables Drupal to join/create/work with a learning object repository federation.
    Copyright (C) 2010 Riccardo Bastianini

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*/


//implementation of hook_help

function collabrep_help($path, $arg)
{
	$output = '';  //declare your output variable
	switch ($path) {
		case "admin/help#collabrep":
		$output = '<p>'.t("Makes Drupal interconnection possible.") .'</p>';
		break;
	}
  return $output;
}

//implementation of hook_permission   //hook_perm() has changed in drupal 7
function collabrep_permission() {
  return array(
  	'collabrep edit settings' => array(
  		'title'=> t('collabrep edit settings'),
  		'description' => t(''),
  		),
  	'is a collabrep repository representation' => array(
  		'title' => t('is a collabrep repository representation'),
  		'description' => t(''),
  		),
  	);
}

function db_local_access()
{
	//send to python the db url
	global $databases;
	$drupal_db=$databases['default']['default'];
	$drupal_db_url=$drupal_db['driver']
       	. '://' . $drupal_db['username']
       	. ":" .  $drupal_db['password']
       	. "@" .  $drupal_db['host']
       	. "/" . $drupal_db['database'];

	drupal_set_message($drupal_db_url,'status');
	////////////////////controllare se i file python esistono e se il log e' scrivibile

	return $drupal_db_url;
}

function collabrep_python_interface($op, $param=False)
{
	unset($output);
	//file io
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/file.inc');
	//
	$path="python ".dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR . "interface.py";
	$pathxshell=dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR;
	$paramList='-'.$op;
	switch ($op)
	{
		case "check_shared_database":
			drupal_set_message($op,'status');
			$paramList.= ' "'.$param.'"';
			exec($path.' '.$paramList, $output, $value);
			//if everything works returns a True value, else returns False
			return $value;
		break;
		case "bootstrap_shared_setup":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" '.$param["myUrl"].' "'.$param["myUser"].'" "'.$param["myPass"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "update_local_fuids":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "leave_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$param.'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("Leave federation "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "exec_remote_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_remote_cron "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "exec_local_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_local_cron "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "import_local_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("import_local_federation "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;

	}
	return "There is an error calling the Python modules!";
}
//implementation of hook_menu
function collabrep_menu()
{
	$items = array();
    		$items['admin/settings/collabrep'] = array(
			'title' => 'Federation Management',
			'description' => 'Federation and Repository settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('federation_management'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['admin/settings/collabrep/Management'] = array(
			'title' => 'Federation management',
			'description' => 'Manage Federation',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_create_or_join_federation'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_DEFAULT_LOCAL_TASK,
		);
		$items['admin/settings/collabrep/Logger'] = array(
			'title' => 'GSIO Logger',
			'description' => 'GSIO Logger',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_logger'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_NORMAL_ITEM,
		);
	return $items;
}

function federation_management()
{

	drupal_goto('admin/settings/collabrep/Management');
	$form = array();

	return system_settings_form($form);
}

function collabrep_logger(){
	$form=array();
	$gsio_location=variable_get("gsio_location",null);
	$need_to_set=variable_get("need_to_set",null);

	if(is_null($gsio_location)|| is_null($need_to_set) | $need_to_set){
		//header("Location: ?q=admin/settings/collabrep/Management");
	}

	$logs = scandir("$gsio_location/utils/logs/");
	$max = 0;
	$tmp_array = array();
	if(count($logs)>2){
		foreach($logs as $filename){
			if($filename !="." && $filename !=".."){
				$tmp = explode(".", $filename);
				$tmp_array[] = $tmp[0];
			}
		}
		$form['go_management'] = array(
			'#type' => 'button',
			'#name' => 'go_management',
			'#title' => t('Federation Management'),
			'#default_value' => t("Federation Management")
		);

		foreach($tmp_array as $filename){

			$form[$filename] = array(

		  '#type' => 'fieldset',

		  '#title' => t(date("r",$filename)),

		  '#weight' => 5,

		  '#collapsible' => TRUE,

		  '#collapsed' => TRUE,
			'#description' => "<textarea rows=100>".file_get_contents("$gsio_location/utils/logs/$filename.log")."</textarea>"

		);
		}

		/**/
		echo "<style>
			#edit-submit{display: none;}

		</style>";
	}else {
		drupal_set_message("No log files have been found.","warning");
		drupal_goto("admin/settings/collabrep/Management");
	}
	return system_settings_form($form);
}

function collabrep_logger_validate(){
	if(isset($_POST["go_management"])){
		drupal_goto("admin/settings/collabrep/Management");
	}
}


function collabrep_create_or_join_federation(){
	$form = array();
	$gsio_location=variable_get("gsio_location",null);
	$need_to_set=variable_get("need_to_set",null);

	if(!is_null($need_to_set) && $need_to_set != true){
		$form['read_logger'] = array(
			'#type' => 'button',
			'#name' => 'read_logger',
			'#title' => t('Read Logger'),
			'#default_value' => t("Read Logger")
		);
		$contents=file_get_contents("$gsio_location/settings/general.ini");
		$contents = parse_ini_string($contents);
		foreach($contents as $key => $value){
			if($key=="location") continue;

			$form[$key] = array(
				'#type' => 'textfield',
				'#name' => $key,
				'#title' => t($key),
				'#default_value' => t($value),
				'#size' => 100,
				'#description' => "",
				'#required' => false
			);
		}
		$form['overwrite'] = array(
			'#type' => 'button',
			'#name' => 'overwrite',
			'#title' => t('Overwrite'),
			'#default_value' => t("Overwrite")
		);
		$form['reset'] = array(
			'#type' => 'button',
			'#name' => 'reset',
			'#title' => t('Reset file'),
			'#default_value' => t("Reset file")
		);
		$form['sync'] = array(
			'#type' => 'button',
			'#name' => 'sync',
			'#title' => t('Sync'),
			'#default_value' => t("Sync"),
			'#suffix' => "<input style='width:100px;padding: 10px;' type='number' min='0' value='100' name='forced_limit'/>"
		);
		echo "<style>#edit-submit{display: none;}</style>";
	}else{
		echo "<style>#edit-submit{display: block;}</style>";
		$form['gsio_location'] = array(
			'#type' => 'textfield',
			'#name' => 'gsio_location',
			'#title' => t('Config filename'),
			'#default_value' => t($gsio_location),
			'#size' => 100,
			'#description' => "This is the location of Glorep SyncIO (GSIO).",
			'#required' => true
		);
		$form['init'] = array(
			'#type' => 'checkbox',
			'#name' => 'init',
			'#title' => t('Init settings'),
			'#default_value' => t("Init settings"),
			'#size' => 100,
			'#description' => "Checking this box will set the default values for daemon's settings.<br />You should only check this if the daemon has been recently installed.",
			'#required' => false
		);
	}
	return system_settings_form($form);
}

function collabrep_create_or_join_federation_validate($form, &$form_state){
	if(isset($_POST["read_logger"])){
		drupal_goto("admin/settings/collabrep/Logger");
	}else if(isset($_POST["op"])){
		if(isset($_POST["gsio_location"])){
			if(file_exists($_POST["gsio_location"])){
					variable_set("gsio_location",$_POST["gsio_location"]);
					variable_set("need_to_set",false);
					if(isset($_POST["init"])){
						$tmp = "php ".$_POST["gsio_location"]."/init.php";
						drupal_set_message(t("$tmp executed."),"status");
						shell_exec($tmp);
					}
				drupal_set_message(t("File has been found"),"status");
			}else{
				drupal_set_message(t("Config file not found, try again."),"error");
			}
		}else{
			drupal_set_message(t("Config file not found, try again."),"error");
		}

	}else if(isset($_POST["reset"])){
		variable_set("need_to_set",true);
		drupal_set_message(t("GSIO config variables have been reinitialized."),"status");
	}else if(isset($_POST["sync"])){
		$contents = parse_ini_string(file_get_contents(variable_get("gsio_location",null)."/settings/general.ini"));
		$tmp = "php ".$contents["location"]."/utils/routine_request/force_sync.php".(isset($_POST["forced_limit"])?' '.$_POST["forced_limit"]:'');
		$result = shell_exec($tmp);
		drupal_set_message("Return message:<br /><pre>".(trim($result)==""?"Sync executed (limit ".$_POST["forced_limit"].").":$result)."</pre>","warning");
	}else if(isset($_POST["overwrite"])){

		//parse settings file
		$general_ini=array();

		$general_ini["location"] = variable_get("gsio_location",null);
		$general_ini["federation_name"]=$_POST["federation_name"];
		$general_ini["local_address"]=$_POST["local_address"];
		$general_ini["local_username"]=$_POST["local_username"];
		$general_ini["local_password"]=$_POST["local_password"];
		$general_ini["local_database_name"]=$_POST["local_database_name"];
		$general_ini["local_database_port"]=$_POST["local_database_port"];

		$local_db = mysqli_connect($_POST["local_address"],$_POST["local_username"],$_POST["local_password"],$_POST["local_database_name"],$_POST["local_database_port"]);
		$local_db->query("ALTER TABLE `node` CHANGE COLUMN `Id_Fd` `Id_Fd` VARCHAR(255) NOT NULL DEFAULT '".$_POST["federation_name"]."'");

		$general_ini["upload_limit"]=$_POST["upload_limit"];
		$general_ini["download_limit"]=$_POST["download_limit"];
		$general_ini["update_limit"]=$_POST["update_limit"];

		$general_ini["shared_address"]=$_POST["shared_address"];
		$general_ini["shared_username"]=$_POST["shared_username"];
		$general_ini["shared_password"]=$_POST["shared_password"];
		$general_ini["shared_database_name"]=$_POST["shared_database_name"];
		$general_ini["shared_database_port"]=$_POST["shared_database_port"];

		$general_ini["listener_port"]=$_POST["listener_port"];
		$general_ini["server_reader_mtu"]=$_POST["server_reader_mtu"];

		$general_ini["sleep_time"]=$_POST["sleep_time"];
		$handler = fopen($general_ini["location"]."/settings/general.ini", "w");
		$tmp = "";
		foreach($general_ini as $key => $value){
			switch ($key) {
				case 'location':
					$tmp .=";################ Location of GSIO #########################\n";
					break;
				case 'federation_name':
					$tmp .="\n\n\n\n;################ LOCAL SERVER DETAILS #####################\n";
					break;
				case 'shared_address':
					$tmp .="\n\n\n\n;################# SHARED SERVER DETAILS ###################\n";
					break;
				case 'listener_port':
					$tmp .="\n\n\n\n;################# CLIENT LISTENER DETAILS #################\n";
					break;
				case 'sleep_time':
					$tmp .="\n\n\n\n;################# GENERIC DETAILS #########################\n";
					$tmp .=";sleep time of the routine (in seconds)\n";
					break;
			}

			$tmp .="$key = $value\n";

		}
		fwrite($handler, $tmp);
		fclose($handler);
	}

}
