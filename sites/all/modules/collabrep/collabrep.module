<?php
//$Id$
//the above line is needed only to release the module into the drupal module database
/*
This version of the software has been entirely written by Riccardo Bastianini, under the supervision of
Professor Sergio Tasso of University of Perugia.

	CollabRep enables Drupal to join/create/work with a learning object repository federation.
    Copyright (C) 2010 Riccardo Bastianini

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program; if not, write to the Free Software Foundation, Inc.,
    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

*/


//implementation of hook_help

function collabrep_help($path, $arg)
{
	$output = '';  //declare your output variable
	switch ($path) {
		case "admin/help#collabrep":
		$output = '<p>'.t("Makes Drupal interconnection possible.") .'</p>';
		break;
	}
  return $output;
}

//implementation of hook_permission   //hook_perm() has changed in drupal 7
function collabrep_permission() {
  return array(
  	'collabrep edit settings' => array(
  		'title'=> t('collabrep edit settings'),
  		'description' => t(''),
  		),
  	'is a collabrep repository representation' => array(
  		'title' => t('is a collabrep repository representation'),
  		'description' => t(''),
  		),
  	);
}

function db_local_access()
{
	//send to python the db url
	global $databases;
	$drupal_db=$databases['default']['default'];
	$drupal_db_url=$drupal_db['driver']
       	. '://' . $drupal_db['username']
       	. ":" .  $drupal_db['password']
       	. "@" .  $drupal_db['host']
       	. "/" . $drupal_db['database'];

	drupal_set_message($drupal_db_url,'status');
	////////////////////controllare se i file python esistono e se il log e' scrivibile

	return $drupal_db_url;
}

function collabrep_python_interface($op, $param=False)
{
	unset($output);
	//file io
	require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/file.inc');
	//
	$path="python ".dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR . "interface.py";
	$pathxshell=dirname(__FILE__) . DIRECTORY_SEPARATOR . 'python'. DIRECTORY_SEPARATOR;
	$paramList='-'.$op;
	switch ($op)
	{
		case "check_shared_database":
			drupal_set_message($op,'status');
			$paramList.= ' "'.$param.'"';
			exec($path.' '.$paramList, $output, $value);
			//if everything works returns a True value, else returns False
			return $value;
		break;
		case "bootstrap_shared_setup":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" '.$param["myUrl"].' "'.$param["myUser"].'" "'.$param["myPass"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "update_local_fuids":
			$loc=db_local_access();
			$paramList.=' "'.$param["myName"].'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			if($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "leave_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$param.'" "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("Leave federation "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "exec_remote_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_remote_cron "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "exec_local_cron":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("exec_local_cron "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;
		case "import_local_federation":
			$loc=db_local_access();
			$paramList.= ' "'.$loc.'"';
			$last=exec($path.' '.$paramList, $output, $value);
			drupal_set_message(t("import_local_federation "),'status');
			if ($value == True)
			{
				$toret = array("return" => True);
			}
			else
			{
				$toret = array("return" => False, "error" => $last);
			}
			return $toret;
		break;

	}
	return "There is an error calling the Python modules!";
}
//implementation of hook_menu
function collabrep_menu()
{
	$items = array();
    		$items['admin/settings/collabrep'] = array(
			'title' => 'Federation Management',
			'description' => 'Federation and Repository settings',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('federation_management'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_NORMAL_ITEM,
		);
		$items['admin/settings/collabrep/Create-join'] = array(
			'title' => 'Create/Join Federation',
			'description' => 'Create or join Federation',
			'page callback' => 'drupal_get_form',
			'page arguments' => array('collabrep_create_or_join_federation'),
			'access arguments' => array('collabrep edit settings'),
			'type' => MENU_DEFAULT_LOCAL_TASK,
		);
	return $items;
}

function federation_management()
{

	drupal_goto('admin/settings/collabrep/Create-join');
	$form = array();

	return system_settings_form($form);
}


function collabrep_create_or_join_federation()
{
	$form = array();

	$form['federate_hostname'] = array(
		'#type' => 'textfield',
		'#name' => 'federate_hostname',
		'#title' => t('Federate hostname'),
		'#default_value' => t(''),
		'#size' => 100,
		'#description' => "",
		'#required' => true
	);

	$form['federate_address'] = array(
		'#type' => 'textfield',
		'#name' => 'federate_address',
		'#title' => t('Federate address'),
		'#default_value' => t(''),
		'#size' => 100,
		'#description' => "",
		'#required' => true
	);

	$form['delete_federate'] = array(
		'#type' => 'checkbox',
		'#name' => 'federate_delete',
		'#title' => t('Delete federate'),
		'#default_value' => t(''),
		'#size' => 100,
		'#description' => "",
		'#required' => false
	);

	return system_settings_form($form);
}

function collabrep_create_or_join_federation_validate($form, &$form_state)
{
	//echo $_POST["name"];
	$name=(isset($_POST["federate_hostname"])?$_POST["federate_hostname"]:null);
	$indirizzo=(isset($_POST["federate_address"])?$_POST["federate_address"]:null);
	$delete=(isset($_POST["federate_delete"])?$_POST["federate_delete"]:null);

	$con=mysqli_connect("localhost", "root","root", "dbunipg") or die ("errore connessione");

	//Controllo se nome o indirizzo del federato sono già esistenti nel database e informo l'utente
	$query1 = "SELECT * FROM `lo_federation` WHERE ServerName='" . $name . "'";
	$query2= "SELECT * FROM `lo_federation` WHERE ServerAddress ='" . $indirizzo . "'";
	$result1 = mysqli_query($con, $query1);
	$result2= mysqli_query($con, $query2);
	$row1 = mysqli_num_rows($result1);
	$row2= mysqli_num_rows($result2);

	if($row1>0)
		echo "Nome già registrato,cambiare nome";
	else{
		if($row2>0)
			echo "indirizzo già registrato,cabiare indirizzo";
		else{
			//nel caso nome o indirizzo non sono presenti,inserisco nel database il federato.
			$query = "SELECT * FROM `lo_federation` WHERE ServerName='" . $name . "' and ServerAddress ='" . $indirizzo . "'";
			$result = mysqli_query($con, $query);

			/*if($row = mysqli_num_rows($result) != 0)
			echo "Federato già registrato" ;

			else{*/

			$query="INSERT INTO `lo_federation`(`ServerName`, `ServerAddress`) VALUES (\"$name\",\"$indirizzo\")";
			$res=mysqli_query($con,$query);
			echo "Registrazione effettuata con successo $name ";
			mysqli_close($con);
		}
	}
}
